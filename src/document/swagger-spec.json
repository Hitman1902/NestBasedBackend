{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "operationId": "AuthController_signup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "summary": "User signup",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User login successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "User login",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logged out successfully"
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "summary": "User Logout",
        "tags": [
          "auth"
        ]
      }
    },
    "/todos": {
      "post": {
        "operationId": "TodosController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTodoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": " created successfully"
          },
          "400": {
            "description": "Failed in creating it"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "create a new Todo item ",
        "tags": [
          "Todo"
        ]
      },
      "get": {
        "operationId": "TodosController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetched Successfully"
          },
          "400": {
            "description": "Unauthorized "
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetched all the tasks of Logged in user",
        "tags": [
          "Todo"
        ]
      }
    },
    "/todos/{id}": {
      "put": {
        "operationId": "TodosController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTodoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Todo updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Todo not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a Todo by ID",
        "tags": [
          "Todo"
        ]
      },
      "delete": {
        "operationId": "TodosController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Todo deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Todo not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a Todo by ID",
        "tags": [
          "Todo"
        ]
      }
    }
  },
  "info": {
    "title": "Todo App",
    "description": "The Todo API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      },
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John snow"
          },
          "email": {
            "type": "string",
            "example": "johnsnow427@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "strongPassword"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "CreateTodoDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Todo"
          },
          "description": {
            "type": "string",
            "example": "Description for todo list "
          },
          "status": {
            "type": "string",
            "example": "completed || pending || inprogress || todo"
          }
        },
        "required": [
          "title",
          "description",
          "status"
        ]
      },
      "UpdateTodoDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}